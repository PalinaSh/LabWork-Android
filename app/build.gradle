apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    def getDescribeTags = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    def getVersionCode = { ->
        try {
            def stdout = getDescribeTags()
            def describeTags = stdout.toString().trim().split("-")
            def describeVersion = describeTags[0].toString().trim().split(".")
            def versionMajor = describeVersion[0] as int
            def versionMinor = describeVersion[1] as int
            def patch = describeTags[1] as int
            return  versionMajor * 1000 + versionMinor * 100 + patch
        }
        catch (ignored) {
            return 0
        }
    }

    def getVersionName = { ->
        try {
            def stdout = getDescribeTags()
            def describeTags = stdout.toString().trim().split("-")
            return describeTags[0].toString() + "." + describeTags[1].toString()
        }
        catch (ignored) {
            return null
        }
    }

    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.palina.lr1"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode getVersionCode()
        versionName getVersionName()
        setProperty("archivesBaseName", "$applicationId-$versionName")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "version"
    productFlavors {
        dev {
            dimension "version"
            versionNameSuffix "-dev"
            manifestPlaceholders.screenOrientation = "unspecified"
            signingConfig signingConfigs.release
        }
        full {
            dimension "version"
            manifestPlaceholders.screenOrientation = "portrait"
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0-rc02'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
